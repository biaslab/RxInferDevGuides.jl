var documenterSearchIndex = {"docs":
[{"location":"guides/docs-contributing/#guide-docs-contributing","page":"Contributing to the documentation","title":"Contributing to the documentation","text":"","category":"section"},{"location":"guides/docs-contributing/","page":"Contributing to the documentation","title":"Contributing to the documentation","text":"Contributing to our documentation is a valuable way to enhance the RxInfer ecosystem. To get started, you can follow these steps:","category":"page"},{"location":"guides/docs-contributing/","page":"Contributing to the documentation","title":"Contributing to the documentation","text":"Familiarize Yourself: First, take some time to explore our existing documentation. Understand the structure, style, and content to align your contributions with our standards.\nIdentify Needs: Identify areas that require improvement, clarification, or expansion. These could be missing explanations, code examples, or outdated information.\nFork the Repository: Fork our documentation repository on GitHub to create your own copy. This allows you to work on your changes independently.\nMake Your Edits: Create or modify content in your forked repository. Ensure your contributions are clear, concise, and well-structured.\nSubmit a Pull Request: When you're satisfied with your changes, submit a pull request (PR) to our main repository. Describe your changes in detail in the PR description.\nReview and Feedback: Our documentation maintainers will review your PR. They may provide feedback or request adjustments. Be responsive to this feedback to facilitate the merging process.\nMerging: Once your changes align with our documentation standards, they will be merged into the main documentation. Congratulations, you've successfully contributed to the RxInfer ecosystem!","category":"page"},{"location":"guides/docs-contributing/","page":"Contributing to the documentation","title":"Contributing to the documentation","text":"By following these steps, you can play an essential role in improving and expanding our documentation, making it more accessible and valuable to the RxInfer community.","category":"page"},{"location":"guides/docs-contributing/#Use-[LiveServer.jl](https://github.com/tlienart/LiveServer.jl)","page":"Contributing to the documentation","title":"Use LiveServer.jl","text":"","category":"section"},{"location":"guides/docs-contributing/","page":"Contributing to the documentation","title":"Contributing to the documentation","text":"LiveServer.jl is a simple and lightweight web server developed in Julia. It features live-reload capabilities, making it a valuable tool for automatically refreshing the documentation of a package while you work on its content.","category":"page"},{"location":"guides/docs-contributing/","page":"Contributing to the documentation","title":"Contributing to the documentation","text":"To use LiveServer.jl, simply follow these steps[1]","category":"page"},{"location":"guides/docs-contributing/","page":"Contributing to the documentation","title":"Contributing to the documentation","text":"[1]: RxInferDevGuides has the LiveServer and Documenter as dependencies and re-exports the servedocs() function, so just using RxInferDevGuides should be enough.","category":"page"},{"location":"guides/docs-contributing/","page":"Contributing to the documentation","title":"Contributing to the documentation","text":"Make sure you have the necessary dependencies installed. ","category":"page"},{"location":"guides/docs-contributing/","page":"Contributing to the documentation","title":"Contributing to the documentation","text":"julia> using RxInferDevGuides, LiveServer, Documenter","category":"page"},{"location":"guides/docs-contributing/","page":"Contributing to the documentation","title":"Contributing to the documentation","text":"After importing the required packages, you can start the live server with the following command:","category":"page"},{"location":"guides/docs-contributing/","page":"Contributing to the documentation","title":"Contributing to the documentation","text":"julia> servedocs()","category":"page"},{"location":"#RxInfer-Ecosystem-Developer-Guides","page":"Home","title":"RxInfer Ecosystem - Developer Guides","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = RxInferDevGuides","category":"page"},{"location":"","page":"Home","title":"Home","text":"This documentation comprises a collection of guides and explanations designed to assist new developers in contributing to the RxInfer ecosystem.","category":"page"},{"location":"#Available-guides","page":"Home","title":"Available guides","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = Main.GUIDE_PAGES","category":"page"},{"location":"#The-ecosystem","page":"Home","title":"The ecosystem","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"RxInfer\nReactiveMP\nGraphPPL\nRocket\nMatrixCorrectionTools\nTinyHugeNumbers","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [RxInferDevGuides]","category":"page"},{"location":"guides/new-package/#Creating-new-packages","page":"Creating new packages","title":"Creating new packages","text":"","category":"section"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"Julia programming language makes it extremely easy to create, develop and register new packages in the ecosystem.","category":"page"},{"location":"guides/new-package/#The-benefits-of-small-packages-for-the-ecosystem","page":"Creating new packages","title":"The benefits of small packages for the ecosystem","text":"","category":"section"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"In the world of software development, there's often a choice to be made between creating a single monolithic package or breaking your codebase into smaller, more focused packages. While both approaches have their merits, opting for smaller packages can offer several significant benefits:","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"Modularity: Smaller packages focus on specific tasks, making them easier to maintain and debug.\nCollaboration: Teams can work on different packages concurrently, speeding up development.\nVersion Control: Precise versioning and fewer dependencies lead to leaner projects.\nPerformance: Smaller packages can result in faster precompilation (in Julia) and more efficient testing.\nFlexibility: Developers can select and customize packages for their needs.\nCommunity: Smaller packages attract contributors, fostering collaboration and faster feedback.","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"In summary, while monolithic packages have their place, opting for smaller, focused packages can bring numerous advantages in terms of modularity, collaboration, version control, flexibility, and community engagement.","category":"page"},{"location":"guides/new-package/#Use-[PkgTemplates](https://github.com/JuliaCI/PkgTemplates.jl)","page":"Creating new packages","title":"Use PkgTemplates","text":"","category":"section"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"PkgTemplates.jl is a Julia package to create new Julia packages in an easy, repeatable, and customizable way. You can use the following template to generate a new package:","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"julia> using PkgTemplates\n\njulia> USER = \"your github user name\" # Use `biaslab` if developing within the BIASlab organisation\n\njulia> template = Template(\n    user = USER, \n    plugins = [\n        CompatHelper(), \n        ProjectFile(), \n        SrcDir(), \n        Git(), \n        License(), \n        Readme(), \n        Tests(), \n        GitHubActions(), \n        Codecov(), \n        Documenter{GitHubActions}(), \n        Formatter(style=\"blue\"), \n        BlueStyleBadge(), \n        PkgEvalBadge()\n])\n\njulia> template(\"MyNewCoolPackage\")","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"This template generates a standard Julia package complete with streamlined documentation, tests, code coverage, and Blue style formatting. Refer to the PkgTemplates documentation if you wish to customize certain steps in the process.","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"Adjust the minimum supported version of Julia","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"After auto-generation, the minimum supported Julia version will be set to 1.0.0. You can modify this in the Project.toml file, for example:","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"[compat]\njulia = \"1.9.2\"","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"Try to be conservative and set as low version of Julia as possible.","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"Adjust the authors of the package","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"The authors field is present in the Project.toml, e.g ","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"authors = [\"John Wick <john.wick@continental.com>\", ...]","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"Add requires dependencies and their [compat] bounds","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"To add new dependencies to your newly created package, start Julia in the package's folder and activate the project using one of the following methods:","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"julia --project=.","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"or ","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"julia","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"julia> ] activate .","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"Then, add dependencies like this:","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"julia> ] add SomeCoolDependency, SomeOtherCoolDependency","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"For each new dependency, it's essential to specify the minimum compatible version in the [compat]section of the Project.toml file, otherwise the official Julia registry will not register your new package. Add the [compat] entries like this:","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"[compat]\njulia = \"1.9\"\nSomeCoolDependency = \"0.19.2\"\nSomeOtherCoolDependency = \"1.3.12\"","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"For more details on compat bounds, check the official Julia documentation.","category":"page"},{"location":"guides/new-package/#Adjust-README.md","page":"Creating new packages","title":"Adjust README.md","text":"","category":"section"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"The README.md file is the front door to your project, offering a concise introduction and guidance for users and contributors. It's a critical piece of documentation that sets the tone for your project's accessibility and success. A well-crafted README.md provides essential information, such as installation instructions, usage examples, and project goals, making it easier for others to understand, engage with, and contribute to your work. So, remember, taking the time to write a clear and informative README.md.","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"note: Note\nSome badges in the auto-generated README.md will be broken unless you register your package in the official Julia registry.","category":"page"},{"location":"guides/new-package/#Write-code-and-tests","page":"Creating new packages","title":"Write code and tests","text":"","category":"section"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"The provided template generates a package with testing and test coverage enabled. Ensure to test all new functionality in the test/runtests.jl file.","category":"page"},{"location":"guides/new-package/#Simplify-Testing-with-ReviseTests","page":"Creating new packages","title":"Simplify Testing with ReviseTests","text":"","category":"section"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"You can streamline testing by using the ReviseTests package, which automatically reloads tests upon any code changes. For example:","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"julia> using ReviseTests, MyNewCoolPackage; ReviseTests.track(MyNewCoolPackage, [ \"runtests\" ])","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"Refer to the ReviseTests documentation for customization options.","category":"page"},{"location":"guides/new-package/#Write-code-and-the-documentation","page":"Creating new packages","title":"Write code and the documentation","text":"","category":"section"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"Julia, adding documentation is straightforward with the Documenter.jl package. Add docstrings to newly created functions and update the docs/index.md  ` file.  To build the documentation locally, use this command (ensure you initialize and instantiate the docs environment first):","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"julia --project=docs docs/make.jl","category":"page"},{"location":"guides/new-package/","page":"Creating new packages","title":"Creating new packages","text":"For customization, refer to the Documenter.jl documentation. Also, check out the contributing guide.","category":"page"}]
}
